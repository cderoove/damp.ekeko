cmdhistory=["(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'HelloFromClojure)))" ";; Loading file src/HelloFromClojure.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'HelloFromClojure)))" ";; Loading file src/simplecallfromeclipse/handlers/HelloFromClojure.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'simplecallfromeclipse.handlers.HelloFromClojure)))" ";; Loading file src/simplecallfromeclipse/handlers/HelloFromClojure.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'simplecallfromeclipse.handlers.HelloFromClojure)))" ";; Loading file src/simplecallfromeclipse/handlers/HelloFromClojure.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'simplecallfromeclipse.handlers.HelloFromClojure)))" ";; Loading file src/simplecallfromeclipse/handlers/HelloFromClojure.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'simplecallfromeclipse.handlers.HelloFromClojure)))" ";; Loading file src/simplecallfromeclipse/handlers/HelloFromClojure.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'simplecallfromeclipse.handlers.HelloFromClojure)))" ";; Loading file src/simplecallfromeclipse/handlers/HelloFromClojure.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'simplecallfromeclipse.handlers.HelloFromClojure)))" ";; Loading file src/simplecallfromeclipse/handlers/HelloFromClojure.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'simplecallfromeclipse.handlers.HelloFromClojure)))" ";; Loading file src/simplecallfromeclipse/handlers/HelloFromClojure.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'simplecallfromeclipse.handlers.HelloFromClojure)))" ";; Loading file src/simplecallfromeclipse/handlers/HelloFromClojure.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'simplecallfromeclipse.handlers.HelloFromClojure)))" ";; Loading file src/simplecallfromeclipse/handlers/HelloFromClojure.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'simplecallfromeclipse.handlers.HelloFromClojure)))" ";; Loading file src/simplecallfromeclipse/handlers/HelloFromClojure.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'simplecallfromeclipse.handlers.HelloFromClojure)))" ";; Loading file src/simplecallfromeclipse/handlers/HelloFromClojure.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'simplecallfromeclipse.handlers.HelloFromClojure)))" "(doc compile)" "(.getProperties System)" "(.getProperty System \\"java.class.path\\")" "(System/getProperty \\"java.class.path\\")" ";; Loading file src/simplecallfromeclipse/handlers/HelloFromClojure.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'simplecallfromeclipse.handlers.HelloFromClojure)))" ";; Loading file src/simplecallfromeclipse/handlers/HelloFromClojure.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'simplecallfromeclipse.handlers.HelloFromClojure)))" ";; Loading file src/simplecallfromeclipse/handlers/HelloFromClojure.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'simplecallfromeclipse.handlers.HelloFromClojure)))" ";; Loading file src/simplecallfromeclipse/handlers/HelloFromClojure.clj" "(import '(org.eclipse.core.resources IWorkspace))" ";; Loading file src/simplecallfromeclipse/handlers/HelloFromClojure.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'simplecallfromeclipse.handlers.HelloFromClojure)))" ";; Loading file src/simplecallfromeclipse/handlers/HelloFromClojure.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'simplecallfromeclipse.handlers.HelloFromClojure)))" ";; Loading file src/simplecallfromeclipse/handlers/HelloFromClojure.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'simplecallfromeclipse.handlers.HelloFromClojure)))" ";; Loading file src/simplecallfromeclipse/handlers/HelloFromClojure.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'simplecallfromeclipse.handlers.HelloFromClojure)))" ";; Loading file src/damp/illimani/mli/mliforjdt.clj" ";; Loading file src/simplecallfromeclipse/handlers/HelloFromClojure.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'simplecallfromeclipse.handlers.HelloFromClojure)))" ";; Loading file src/simplecallfromeclipse/handlers/HelloFromClojure.clj" ";; Loading file src/damp/illimani/mli/mliforjdt.clj" ";; Loading file src/simplecallfromeclipse/handlers/HelloFromClojure.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'simplecallfromeclipse.handlers.HelloFromClojure)))" ";; Loading file src/simplecallfromeclipse/handlers/HelloFromClojure.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'simplecallfromeclipse.handlers.HelloFromClojure)))" ";; Loading file src/simplecallfromeclipse/handlers/HelloFromClojure.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'simplecallfromeclipse.handlers.HelloFromClojure)))" "*compile-path*" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'simplecallfromeclipse.handlers.HelloFromClojure)))" ";; Loading file src/simplecallfromeclipse/handlers/HelloFromClojure.clj" "(compile 'simplecallfromeclipse.handlers.HelloFromClojure)" "*compile-path*" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'simplecallfromeclipse.handlers.HelloFromClojure)))" ";; Loading file src/simplecallfromeclipse/handlers/HelloFromClojure.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'simplecallfromeclipse.handlers.HelloFromClojure)))" ";; Loading file src/simplecallfromeclipse/handlers/HelloFromClojure.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'simplecallfromeclipse.handlers.HelloFromClojure)))" ";; Loading file src/simplecallfromeclipse/handlers/HelloFromClojure.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'simplecallfromeclipse.handlers.HelloFromClojure)))" ";; Loading file src/simplecallfromeclipse/handlers/HelloFromClojure.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'simplecallfromeclipse.handlers.HelloFromClojure)))" ";; Loading file src/simplecallfromeclipse/handlers/HelloFromClojure.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'simplecallfromeclipse.handlers.HelloFromClojure)))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.barista.test.HelloFromClojure)))" ";; Loading file src/damp/illimani/barista/test/HelloFromClojure.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.barista.test.HelloFromClojure)))" ";; Loading file src/damp/illimani/barista/test/HelloFromClojure.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.barista.test.HelloFromClojure)))" "(apply concat [1 2 3 4])" "(apply str [\\"123\\" \\"abc\\"])" ";; Loading file src/damp/illimani/mli/mliforjdt.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.mli.mliforjdt)))" "(.start (Thread. (fn [] (println foo))))" "(.start (Thread. (fn [] (println 10))))" ";; Loading file src/damp/illimani/mli/mliforjdt.clj" ";; Loading file src/damp/illimani/barista/baristaconnect.clj" ";; Loading file src/damp/illimani/logic/reification.clj" ";; Loading file src/Introduction.clj" "(run* [x] (membero x [1 2 3]))" "(use Introduction)" "(use 'Introduction)" ";; Loading file src/Introduction.clj" "(run* [x] (membero x [1 2 3]))" "(in-ns Introduction)" "*ns*" "(in-ns Introduction)" ";; Loading file src/damp/illimani/logic/reification.clj" ";; Loading file src/damp/illimani/barista/baristaconnect.clj" "(.class \\"\\")" "(.getClass \\"aaa\\")" "(instance? java.lang.String \\"a\\")" ";; Loading file src/ThesisExamples.clj" "(run* [x]\\n      (conda \\n        ((\=\= 'virgin x) (\=\= 'foo 'bar))\\n        ((\=\= 'olive x))\\n        ((\=\= 'oil x))))" "(in-ns ThesisExamples)" ";; Loading file src/damp/illimani/logic/reification.clj" ";; Loading file src/damp/illimani/barista/baristaconnect.clj" ";; Loading file src/damp/illimani/logic/reification.clj" ";; Loading file src/damp/illimani/barista/baristaconnect.clj" ";; Loading file src/damp/illimani/logic/reification.clj" ";; Loading file src/damp/illimani/barista/baristaconnect.clj" ";; Loading file src/damp/illimani/logic/reification.clj" "(def al (new java.util.ArrayList))" "al" "(instance? java.util.AbstractList al)" ";; Loading file src/damp/illimani/logic/reification.clj" ";; Loading file src/damp/illimani/barista/illimanibarista.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.barista.illimanibarista)))" ";; Loading file src/damp/illimani/barista/illimanibarista.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.barista.illimanibarista)))" ";; Loading file src/damp/illimani/barista/illimanibarista.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.barista.illimanibarista)))" ";; Loading file src/damp/illimani/barista/illimanibarista.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.barista.illimanibarista)))" "(new barista.SmalltalkProxy)" ";; Loading file src/damp/illimani/barista/illimanibarista.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.barista.illimanibarista)))" "(compile 'damp.illimani.barista.illimanibarista)" "(new barista.SmalltalkProxy)" ";; Loading file src/damp/illimani/barista/illimanibarista.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.barista.IllimaniBarista)))" ";; Loading file src/damp/illimani/barista/illimanibarista.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.barista.IllimaniBarista)))" ";; Loading file src/damp/illimani/barista/illimanibarista.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.barista.IllimaniBarista)))" ";; Loading file src/damp/illimani/barista/IllimaniActivator.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.barista.IllimaniActivator)))" ";; Loading file src/damp/illimani/barista/IllimaniActivator.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.barista.IllimaniActivator)))" ";; Loading file src/damp/illimani/barista/IllimaniActivator.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.barista.IllimaniActivator)))" ";; Loading file src/damp/illimani/barista/IllimaniActivator.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.barista.IllimaniActivator)))" ";; Loading file src/damp/illimani/barista/baristaconnect.clj" ";; Loading file src/damp/illimani/barista/IllimaniActivator.clj" ";; Loading file src/damp/illimani/logic/reification.clj" ";; Loading file src/damp/illimani/barista/baristaconnect.clj" ";; Loading file src/damp/illimani/barista/IllimaniActivator.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.barista.IllimaniActivator)))" ";; Loading file src/damp/illimani/barista/IllimaniActivator.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.barista.IllimaniActivator)))" ";; Loading file src/damp/illimani/barista/IllimaniActivator.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.barista.IllimaniActivator)))" ";; Loading file src/damp/illimani/barista/IllimaniActivator.clj" ";; Switching to damp.illimani.barista.IllimaniActivator namespace" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.barista.IllimaniActivator)))" ";; Loading file src/damp/illimani/barista/IllimaniActivator.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.barista.IllimaniActivator)))" ";; Loading file src/damp/illimani/barista/IllimaniActivator.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.barista.IllimaniActivator)))" ";; Loading file src/damp/illimani/barista/IllimaniActivator.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.barista.IllimaniActivator)))" ";; Loading file src/damp/illimani/barista/IllimaniActivator.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.barista.IllimaniActivator)))" ";; Loading file src/damp/illimani/barista/IllimaniActivator.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.barista.IllimaniActivator)))" "(eval '(run* [q] (\=\= q 5])))" "(eval '(run* [q] (\=\= q 5)))" "(eval '(d) (use [clojure.core.logic minikanren prelude nonrel match disequality tabled]) (run* [q] (\=\= q 5))))" "(eval '(do (use [clojure.core.logic minikanren prelude nonrel match disequality tabled]) (run* [q] (\=\= q 5))))" "(eval '(do (require [clojure.core.logic minikanren prelude nonrel match disequality tabled]) (run* [q] (\=\= q 5))))" "(eval '(do (use [clojure.core.logic minikanren prelude nonrel match disequality tabled]) (run* [q] (\=\= q 5))))" "*ns*" ";; Loading file src/damp/illimani/barista/IllimaniActivator.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.barista.IllimaniActivator)))" ";; Loading file src/damp/illimani/barista/IllimaniActivator.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.barista.IllimaniActivator)))" ";; Loading file src/damp/illimani/barista/IllimaniActivator.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.barista.IllimaniActivator)))" ";; Loading file src/damp/illimani/barista/IllimaniActivator.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.barista.IllimaniActivator)))" ";; Loading file src/damp/illimani/barista/IllimaniActivator.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.barista.IllimaniActivator)))" ";; Loading file src/damp/illimani/barista/IllimaniActivator.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.barista.IllimaniActivator)))" ";; Loading file src/damp/illimani/barista/IllimaniActivator.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.barista.IllimaniActivator)))" ";; Loading file src/clojure/core/logic/match.clj" "(extract-vars '(\=\= ?x ?y))" ";; Loading file src/damp/illimani/evaluator/plaineval.clj" "(illimani-query-to-kanren-query '(membero ?x ?y))" "(in-ns 'damp.illimani.evaluator.plaineval)" "(illimani-query-to-kanren-query '(membero ?x ?y))" "(illimani-query-to-kanren-query '(membero ?x ?y) {?x ?y})" "(illimani-query-to-kanren-query '(membero ?x ?y) {'?x '?y})" ";; Loading file src/damp/illimani/evaluator/plaineval.clj" "(println (str (illimani-query-to-kanren-query '(membero ?x ?y) {'?x '?y})))" "(println (str (rest (illimani-query-to-kanren-query '(membero ?x ?y) {'?x '?y}))))" ";; Loading file src/damp/illimani/evaluator/plaineval.clj" ";; Loading file src/damp/illimani/barista/IllimaniActivator.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.barista.IllimaniActivator)))" ";; Loading file src/damp/illimani/barista/IllimaniActivator.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.barista.IllimaniActivator)))" ";; Loading file src/damp/illimani/evaluator/plaineval.clj" ";; Loading file src/damp/illimani/barista/IllimaniActivator.clj" "ss" "2" "(read-string \\"(is-compilationUnit ?c) (is-child-of ?n ?c)\\")\\n" ";; Loading file src/damp/illimani/evaluator/plaineval.clj" "(read-string (str \\"(\\" \\"(is-compilationUnit ?c) (is-child-of ?n ?c)\\" \\")\\"))" "(def q (read-string (str \\"(\\" \\"(is-compilationUnit ?c) (is-child-of ?n ?c)\\" \\")\\")))" "q" " (vec (extract-vars q))" "(def lvars (vec (extract-vars q)))" "(println lvars)" "(println (illimani-query-to-kanren-query q lvars))" ";; Loading file src/damp/illimani/evaluator/plaineval.clj" "(nth 0 [1])" "(nth [1] 0)" "(nth [0] 0)" "(nth [0] 1)" ";; Loading file src/damp/illimani/evaluator/plaineval.clj" "(size [0])" "(count [0])" ";; Loading file src/damp/illimani/evaluator/plaineval.clj" "(range 0 1)" "(range 0 2)" ";; Loading file src/damp/illimani/evaluator/plaineval.clj" ";; Loading file src/damp/illimani/logic/reification.clj" ";; Loading file src/damp/illimani/util/jobs.clj" ";; Loading file src/damp/illimani/barista/IllimaniActivator.clj" ";; Loading file src/damp/illimani/util/jobs.clj" "(set\! *warn-on-reflection* true)" ";; Loading file src/damp/illimani/util/jobs.clj" "(set\! *warn-on-reflection* true)" ";; Loading file src/damp/illimani/util/jobs.clj" ";; Loading file src/damp/illimani/barista/IllimaniActivator.clj" "(set\! *warn-on-reflection* true)" ";; Loading file src/damp/illimani/barista/IllimaniActivator.clj" ";; Loading file src/damp/illimani/util/jobs.clj" ";; Loading file src/damp/illimani/mli/mliforjdt.clj" ";; Loading file src/damp/illimani/util/jobs.clj" ";; Loading file src/damp/illimani/mli/mliforjdt.clj" ";; Loading file src/damp/illimani/barista/IllimaniActivator.clj" ";; Loading file src/damp/illimani/mli/mliforjdt.clj" ";; Loading file src/damp/illimani/util/jobs.clj" "(set\! *warn-on-reflection* true)" ";; Loading file src/damp/illimani/util/jobs.clj" ";; Loading file src/damp/illimani/mli/mliforjdt.clj" ";; Loading file src/damp/illimani/util/jobs.clj" ";; Loading file src/damp/illimani/mli/mliforjdt.clj" ";; Loading file src/damp/illimani/evaluator/plaineval.clj" "(in-ns damp.illimani.evaluator.plaineval)" "*ns*" "(indexed '(a b c d))" ";; Loading file src/damp/illimani/logic/reification.clj" ";; Loading file src/damp/illimani/evaluator/plaineval.clj" ";; Loading file src/damp/illimani/barista/IllimaniActivator.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.logic.reification)))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.evaluator.plaineval)))" ";; Loading file src/damp/illimani/mli/mliforjdt.clj" ";; Loading file src/damp/illimani/evaluator/plaineval.clj" ";; Loading file src/damp/illimani/mli/mliforjdt.clj" ";; Loading file src/damp/illimani/evaluator/plaineval.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.barista.IllimaniActivator)))" ";; Loading file src/damp/illimani/barista/baristaconnect.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.evaluator.plaineval)))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.logic.generation)))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.mli.mliforjdt)))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.logic.reification)))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.util.jobs)))" ";; Loading file src/damp/illimani/barista/IllimaniActivator.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.barista.IllimaniActivator)))" ";; Loading file src/damp/illimani/util/jobs.clj" ";; Loading file src/damp/illimani/evaluator/plaineval.clj" ";; Loading file src/damp/illimani/util/text.clj" ";; Loading file src/damp/illimani/evaluator/plaineval.clj" ";; Loading file src/damp/illimani/util/text.clj" "(ellipsis \\"foooo\\")" "*ns*" ";; Loading file src/damp/illimani/util/text.clj" "(ellipsis \\"foooo\\")" "*ns*" "(in-ns 'damp.illimani.util.text)" "(ellipsis \\"foooo\\")" "(str (ellipsis \\"foooo\\"))" "(doall (ellipsis \\"foooo\\"))" "(str \\"a\\" \\"bb\\")" ";; Loading file src/damp/illimani/util/text.clj" "(ellipsis \\"foooo\\")" ";; Loading file src/damp/illimani/util/text.clj" "(ellipsis \\"foooo\\")" ";; Loading file src/damp/illimani/util/text.clj" "(split-lines \\"" "\\")" "(split-lines \\"\\")" ";; Loading file src/damp/illimani/util/text.clj" "(in-ns damp.illimani.util.text)" "(in-ns 'damp.illimani.util.text)" "(split-lines \\"a\\")" "(clojure.contrib.string/split-lines \\"a\\")" "(clojure.contrib.string/split-lines \\"\\")" "(first (clojure.contrib.string/split-lines \\"\\"))" ";; Loading file src/damp/illimani/util/text.clj" "(ellipsis \\"foo\\")" ";; Loading file src/damp/illimani/util/jobs.clj" "(set\! *warn-on-reflection* true)" ";; Loading file src/damp/illimani/util/jobs.clj" ";; Loading file src/damp/illimani/barista/IllimaniActivator.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.barista.IllimaniActivator)))" ";; Loading file src/damp/illimani/mli/mliforjdt.clj" "(hash-map [['a 1] ['b 2]])" "(hash-map ['a 1] ['b 2])" ";; Loading file src/damp/illimani/mli/mliforjdt.clj" ";; Loading file src/damp/illimani/barista/IllimaniActivator.clj" ";; Loading file src/damp/illimani/mli/mliforjdt.clj" ";; Loading file src/damp/illimani/barista/IllimaniActivator.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.barista.IllimaniActivator)))" ";; Loading file src/damp/illimani/mli/mliforjdt.clj" ";; Loading file src/damp/illimani/barista/IllimaniActivator.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.barista.IllimaniActivator)))" ";; Loading file src/damp/illimani/mli/mliforjdt.clj" ";; Loading file src/damp/illimani/logic/reification.clj" ";; Loading file src/damp/illimani/mli/mliforjdt.clj" ";; Loading file src/damp/illimani/logic/reification.clj" ";; Loading file src/damp/illimani/barista/IllimaniActivator.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.barista.IllimaniActivator)))" ";; Loading file src/damp/illimani/barista/IllimaniActivator.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.barista.IllimaniActivator)))" ";; Loading file src/damp/illimani/logic/reification.clj" ";; Loading file src/damp/illimani/mli/mliforjdt.clj" ";; Switching to damp.illimani.util.text namespace" ";; Loading file src/damp/illimani/util/text.clj" ";; Loading file src/damp/illimani/evaluator/plaineval.clj" ";; Loading file src/clojure/core/logic.clj" ";; Loading file src/damp/illimani/evaluator/plaineval.clj" ";; Loading file src/damp/illimani/barista/IllimaniActivator.clj" ";; Loading file src/damp/illimani/evaluator/plaineval.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.barista.IllimaniActivator)))" ";; Loading file src/damp/illimani/logic/reification.clj" ";; Loading file src/damp/illimani/barista/IllimaniActivator.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.barista.IllimaniActivator)))" ";; Loading file src/damp/illimani/barista/IllimaniActivator.clj" ";; Loading file src/damp/illimani/evaluator/plaineval.clj" ";; Loading file src/clojure/core/logic.clj" ";; Loading file src/damp/illimani/barista/IllimaniActivator.clj" ";; Loading file src/damp/illimani/evaluator/plaineval.clj" ";; Switching to damp.illimani.barista.IllimaniActivator namespace" ";; Loading file src/damp/illimani/barista/IllimaniActivator.clj" ";; Switching to damp.illimani.barista.IllimaniActivator namespace" "2\\n\\n\\n\\n" "(repl/start-server)\\n" "(def server (repl/start-server))\\n" "(.getLocalPort server)" "(def s (first server))" "s" "(.getLocalPort s)" "(eclipse-workspace)" ";; Loading file src/damp/illimani/barista/IllimaniActivator.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.barista.IllimaniActivator)))" ";; Loading file src/damp/illimani/barista/activator.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.barista.activator)))" ";; Loading file src/damp/illimani/barista/activator.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.barista.Activator)))" ";; Loading file src/damp/illimani/barista/activator.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.barista.Activator)))" ";; Loading file src/damp/illimani/barista/activator.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.barista.Activator)))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.Activator)))" ";; Loading file src/damp/illimani/activator.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.Activator)))" ";; Loading file src/damp/illimani/activator.clj" ";; Loading file src/testje.clj" ";; Loading file src/simplecallfromeclipse/handlers/HelloFromClojure.clj" ";; Loading file src/damp/illimani/activator.clj" ";; Loading file src/damp/illimani/bar.clj" ";; Loading file src/damp/illimani/mli/mliforjdt.clj" ";; Loading file src/damp/illimani/activator.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.Activator)))" ";; Loading file src/damp/illimani/activator.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.Activator)))" ";; Loading file src/damp/illimani/activator.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.illimani.Activator)))" ";; Loading file src/damp/ekeko/evaluator/evaluator.clj" "(macroexpand-1 (ekeko* [?a ?b] (membero ?a ?b)))\\n" "*ns*\\n" ";; Switching to damp.ekeko.evaluator.evaluator namespace" "(macroexpand-1 (ekeko* [?a ?b] (membero ?a ?b)))\\n\\n" ";; Loading file src/damp/ekeko/evaluator/evaluator.clj" "(macroexpand-1 (ekeko* [?a ?b] (membero ?a ?b)))\\n" "(macroexpand-1 (ekeko [?a ?b] (membero ?a ?b)))\\n" ";; Loading file src/damp/ekeko/evaluator/evaluator.clj" ";; Switching to damp.ekeko.evaluator.evaluator namespace" "(macroexpand-1 (ekeko [?a ?b] (membero ?a ?b)))\\n" "(macroexpand-1 '(ekeko [?a ?b] (membero ?a ?b)))\\n" "(macroexpand-1 '(ekeko* [?a ?b] (membero ?a ?b)))\\n" "(clojure.core/refer 'clojure.core)" "(eclipse-workspace)" "(in-ns damp.ekeko.mli.mliforjdt)" "(in-ns damp.ekeko.evaluator.evaluator)" "*ns*\\n" ";; Loading file src/damp/ekeko/reification.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.ekeko.reification)))" ";; Loading file src/damp/ekeko/basic.clj" ";; Switching to damp.ekeko.basic namespace" "(run* [?q] (invocation-like-expression ?kind ?e))" ";; Loading file src/damp/ekeko/basic.clj" "(run* [?q] (invocation-like-expression ?kind ?e))" ";; Switching to damp.ekeko.basic namespace" "(run* [?q] (invocation-like-expression ?kind ?e))" "(ekeko [?kind ?e] (invocation-like-expression ?kind ?e))" "(run* [?u] (fresh [?kind ?e] (\=\= [?kind ?e] ?u) (invocation-like-expression ?kind ?e)))" "(if nil \\"nok\\" \\"ok\\")" ";; Loading file src/damp/ekeko/soot.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'damp.ekeko.apiusage)))" ";; Loading file src/damp/ekeko/apiusage.clj" ";; Switching to damp.ekeko.apiusage namespace" "  (def qresults-per-project  (overall-results-per-project \\"/Users/cderoove/Quaatlas/facts/\\"))\\n  (output-quaatlas \\"/Users/cderoove/Quaatlas/\\" qresults-per-project)"]
eclipse.preferences.version=1
